name: Claude PR Assistant

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Automatic PR review on new PRs and updates
  auto-review:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Load project context
        id: context
        run: |
          # Load essential context files for Claude
          CLAUDE_CONTEXT=""
          if [ -f "CLAUDE.md" ]; then
            CLAUDE_CONTEXT="$CLAUDE_CONTEXT\n\n--- CLAUDE.md ---\n$(cat CLAUDE.md)"
          fi
          if [ -f ".claude/core/quick-reference.md" ]; then
            CLAUDE_CONTEXT="$CLAUDE_CONTEXT\n\n--- Quick Reference ---\n$(cat .claude/core/quick-reference.md)"
          fi
          # Save context to output (escaped for GitHub Actions)
          echo "context<<EOF" >> $GITHUB_OUTPUT
          echo "$CLAUDE_CONTEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Claude PR Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run custom Claude integration for comprehensive PR review
          bash .github/scripts/claude_wrapper.sh \
            --prompt "You are reviewing PR #${{ github.event.pull_request.number || inputs.pr_number }} for the Mids Hero Web project.
            
            Repository: ${{ github.repository }}
            Event: ${{ github.event_name }}
            
            Please provide a comprehensive review focusing on:
            
            ## Code Quality
            - Adherence to project standards (use of 'just', 'uv', 'fd', 'trash')
            - Python best practices and type hints
            - React/TypeScript patterns and conventions
            - Error handling and edge cases
            
            ## City of Heroes Domain
            - Accuracy of game mechanics implementation
            - Proper archetype/power/enhancement modeling
            - Consistency with Mids Reborn expectations
            
            ## Architecture & Design
            - Database schema appropriateness
            - API design and RESTful principles
            - Component structure and reusability
            - Performance considerations
            
            ## Testing & Documentation
            - Test coverage for new code
            - Documentation updates needed
            - Impact on existing functionality
            
            ## Project Alignment
            - Alignment with current epic goals
            - Following established patterns from CLAUDE.md
            - Integration with existing systems
            
            Provide:
            1. Overall assessment (approve/request changes)
            2. Specific inline comments on code issues
            3. Suggestions for improvement
            4. Recognition of good patterns to encourage
            
            Format as a helpful GitHub PR review comment." \
            --timeout 20 \
            --pr ${{ github.event.pull_request.number || inputs.pr_number }} \
            --post-comment

  # Handle @claude mentions in PR comments
  claude-mention-handler:
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR details
        id: pr
        run: |
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
          echo "base_branch=$(echo "$PR_DATA" | jq -r .base.ref)" >> $GITHUB_OUTPUT
          echo "head_branch=$(echo "$PR_DATA" | jq -r .head.ref)" >> $GITHUB_OUTPUT
          echo "title=$(echo "$PR_DATA" | jq -r .title)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Extract question and context
        id: extract
        run: |
          # Extract the question after @claude
          QUESTION=$(echo "${{ github.event.comment.body }}" | sed 's/@claude//' | sed 's/^[[:space:]]*//')
          
          # Determine which module context to load based on keywords
          MODULE_CONTEXT=""
          if echo "$QUESTION" | grep -iE "database|migration|schema|model" > /dev/null; then
            if [ -f ".claude/modules/database/guide.md" ]; then
              MODULE_CONTEXT="$MODULE_CONTEXT\n\n--- Database Module ---\n$(cat .claude/modules/database/guide.md)"
            fi
          elif echo "$QUESTION" | grep -iE "import|i12|mhd|power data" > /dev/null; then
            if [ -f ".claude/modules/import/guide.md" ]; then
              MODULE_CONTEXT="$MODULE_CONTEXT\n\n--- Import Module ---\n$(cat .claude/modules/import/guide.md)"
            fi
          elif echo "$QUESTION" | grep -iE "api|endpoint|route|fastapi" > /dev/null; then
            if [ -f ".claude/modules/api/guide.md" ]; then
              MODULE_CONTEXT="$MODULE_CONTEXT\n\n--- API Module ---\n$(cat .claude/modules/api/guide.md)"
            fi
          elif echo "$QUESTION" | grep -iE "frontend|react|component|ui" > /dev/null; then
            if [ -f ".claude/modules/frontend/guide.md" ]; then
              MODULE_CONTEXT="$MODULE_CONTEXT\n\n--- Frontend Module ---\n$(cat .claude/modules/frontend/guide.md)"
            fi
          fi
          
          echo "question<<EOF" >> $GITHUB_OUTPUT
          echo "$QUESTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "module_context<<EOF" >> $GITHUB_OUTPUT
          echo "$MODULE_CONTEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Get PR diff context
        id: diff
        run: |
          # Get the diff for context (limited to avoid token overflow)
          DIFF=$(gh pr diff ${{ github.event.issue.number }} --repo ${{ github.repository }} | head -n 500)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Claude Response
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare context for Claude
          CONTEXT=""
          if [ -n "${{ steps.extract.outputs.module_context }}" ]; then
            CONTEXT="Relevant Module Context: ${{ steps.extract.outputs.module_context }}"
          fi
          
          # Run custom Claude integration
          bash .github/scripts/claude_wrapper.sh \
            --prompt "You are responding to a question in PR #${{ github.event.issue.number }} of the Mids Hero Web project.
            
            PR Title: ${{ steps.pr.outputs.title }}
            Base Branch: ${{ steps.pr.outputs.base_branch }}
            Head Branch: ${{ steps.pr.outputs.head_branch }}
            User: ${{ github.event.comment.user.login }}
            
            User Question:
            ${{ steps.extract.outputs.question }}
            
            $CONTEXT
            
            Please provide a helpful response that:
            1. Directly answers the user's question
            2. References specific code from the PR when relevant
            3. Follows project conventions (use just commands, uv for Python, etc.)
            4. Considers City of Heroes domain knowledge when applicable
            5. Suggests concrete code examples when helpful
            6. Keeps responses concise but complete
            
            Format your response as a GitHub comment with proper markdown." \
            --timeout 10 \
            --pr ${{ github.event.issue.number }} \
            --post-comment

  # Check if review was requested via slash command
  slash-command-review:
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/review')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger review
        run: |
          gh workflow run claude-pr-assistant.yml \
            -f pr_number=${{ github.event.issue.number }} \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Add acknowledgment
        run: |
          gh pr comment ${{ github.event.issue.number }} \
            --body "ðŸ¤– Review requested! Claude is analyzing the changes..." \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}