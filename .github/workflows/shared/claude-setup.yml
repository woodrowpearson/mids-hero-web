name: Reusable Claude Setup

on:
  workflow_call:
    inputs:
      prompt:
        description: 'Claude prompt to execute'
        required: true
        type: string
      max_turns:
        description: 'Maximum conversation turns'
        required: false
        type: number
        default: 3
      timeout_minutes:
        description: 'Timeout in minutes'
        required: false
        type: number
        default: 10
      cache_prompts:
        description: 'Enable prompt caching'
        required: false
        type: boolean
        default: true
      cache_control:
        description: 'Cache control strategy'
        required: false
        type: string
        default: 'ephemeral'
      checkout_ref:
        description: 'Git ref to checkout'
        required: false
        type: string
        default: ''
      context_files:
        description: 'Additional context files for Claude (multiline string)'
        required: false
        type: string
        default: ''
      pr_number:
        description: 'Pull request number for context'
        required: false
        type: number
        default: 0
      
    secrets:
      anthropic_api_key:
        description: 'Anthropic API key'
        required: true
      github_token:
        description: 'GitHub token'
        required: true
    
    outputs:
      success:
        description: 'Whether Claude execution succeeded'
        value: ${{ jobs.claude-review.outputs.success }}
      response:
        description: 'Claude response (if available)'
        value: ${{ jobs.claude-review.outputs.response }}
      comment_url:
        description: 'URL of posted comment (if applicable)'
        value: ${{ jobs.claude-review.outputs.comment_url }}

jobs:
  claude-review:
    name: Claude Review
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.claude.outputs.success }}
      response: ${{ steps.claude.outputs.response }}
      comment_url: ${{ steps.post-comment.outputs.comment_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_ref || github.head_ref || github.ref }}
          fetch-depth: 0
      
      - name: Prepare context
        id: context
        run: |
          # Initialize context
          CONTEXT=""
          
          # Add PR context if available
          if [[ "${{ inputs.pr_number }}" -gt 0 ]]; then
            PR_INFO=$(gh pr view ${{ inputs.pr_number }} --json title,body,author,labels,files --jq '.')
            CONTEXT="$CONTEXT\n\n## Pull Request #${{ inputs.pr_number }}\n$PR_INFO"
          fi
          
          # Add custom context files if specified
          if [[ -n "${{ inputs.context_files }}" ]]; then
            CONTEXT="$CONTEXT\n\n## Additional Context Files:"
            while IFS= read -r file; do
              if [[ -f "$file" ]]; then
                CONTEXT="$CONTEXT\n\n### $file\n\`\`\`\n$(cat "$file")\n\`\`\`"
              fi
            done <<< "${{ inputs.context_files }}"
          fi
          
          # Save context for Claude
          echo "context<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.github_token }}
      
      - name: Execute Claude Review
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.anthropic_api_key }}
          github_token: ${{ secrets.github_token }}
          cache_prompts: ${{ inputs.cache_prompts }}
          cache_control: ${{ inputs.cache_control }}
          timeout_minutes: "${{ inputs.timeout_minutes }}"
          max_turns: "${{ inputs.max_turns }}"
          direct_prompt: |
            ${{ inputs.prompt }}
            
            ${{ steps.context.outputs.context }}
      
      - name: Check Claude status
        id: check-status
        run: |
          # Check if Claude execution was successful
          if [[ "${{ steps.claude.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Claude review completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Claude review failed or timed out" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Post comment if PR context
        id: post-comment
        if: inputs.pr_number > 0 && steps.check-status.outputs.success == 'true'
        run: |
          # Create comment file
          cat > comment.md << 'EOF'
          ## 🤖 Claude Review Results
          
          ${{ steps.claude.outputs.response || 'Review completed but no specific feedback generated.' }}
          
          ---
          *Generated by Claude AI • [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          EOF
          
          # Post comment
          COMMENT_URL=$(gh pr comment ${{ inputs.pr_number }} --body-file comment.md --jq '.url')
          echo "comment_url=$COMMENT_URL" >> $GITHUB_OUTPUT
          echo "Comment posted: $COMMENT_URL" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.github_token }}