name: Documentation Auto-Sync

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.md'
      - '.github/workflows/*.yml'
      - 'justfile'
      - 'backend/pyproject.toml'
      - 'frontend/package.json'
      - 'docker-compose.yml'
      - 'Dockerfile'
  schedule:
    # Weekly full sync on Sunday at 2 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_full_sync:
        description: 'Force full documentation synchronization'
        type: boolean
        default: false
      sync_type:
        description: 'Type of sync to perform'
        type: choice
        options:
          - auto
          - full
          - workflows
          - api
          - context
        default: auto

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

concurrency:
  group: doc-sync-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel doc syncs

jobs:
  analyze-changes:
    name: Analyze Documentation Impact
    runs-on: ubuntu-latest
    outputs:
      needs_sync: ${{ steps.analysis.outputs.needs_sync }}
      sync_type: ${{ steps.analysis.outputs.sync_type }}
      affected_docs: ${{ steps.analysis.outputs.affected_docs }}
      change_summary: ${{ steps.analysis.outputs.change_summary }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get change context
        id: context
        run: |
          # Get commit messages for context
          if [[ "${{ github.event_name }}" == "push" ]]; then
            COMMITS=$(git log --oneline -n 5 --pretty=format:"%s")
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Analyze changed files
        id: analysis
        run: |
          NEEDS_SYNC="false"
          SYNC_TYPE="none"
          AFFECTED_DOCS=""
          CHANGE_SUMMARY=""
          
          # Handle manual dispatch
          if [[ "${{ inputs.sync_type }}" != "" ]] && [[ "${{ inputs.sync_type }}" != "auto" ]]; then
            NEEDS_SYNC="true"
            SYNC_TYPE="${{ inputs.sync_type }}"
            AFFECTED_DOCS="manual"
          # Force full sync if requested or scheduled
          elif [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ inputs.force_full_sync }}" == "true" ]]; then
            NEEDS_SYNC="true"
            SYNC_TYPE="full"
            AFFECTED_DOCS="all"
          else
            # Get changed files more efficiently
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD 2>/dev/null || echo "")
            
            # Create change summary
            CHANGE_SUMMARY="Files changed: $(echo "$CHANGED_FILES" | wc -l | tr -d ' ')"
            
            # Analyze impact with priority system
            WORKFLOW_CHANGED=false
            API_CHANGED=false
            CONTEXT_CHANGED=false
            COMMAND_CHANGED=false
            DB_CHANGED=false
            
            for file in $CHANGED_FILES; do
              case "$file" in
                .github/workflows/*.yml)
                  WORKFLOW_CHANGED=true
                  ;;
                .claude/*)
                  CONTEXT_CHANGED=true
                  ;;
                backend/app/api/*.py|backend/app/routers/*.py)
                  API_CHANGED=true
                  ;;
                justfile)
                  COMMAND_CHANGED=true
                  ;;
                backend/app/models/*.py|backend/alembic/versions/*.py)
                  DB_CHANGED=true
                  ;;
              esac
            done
            
            # Set sync type based on highest priority change
            if $WORKFLOW_CHANGED; then
              NEEDS_SYNC="true"
              SYNC_TYPE="workflows"
              AFFECTED_DOCS=".github/README.md .github/workflows/README.md github_actions_summary.md"
            elif $API_CHANGED; then
              NEEDS_SYNC="true"
              SYNC_TYPE="api"
              AFFECTED_DOCS="docs/api-reference.md .claude/modules/api/specification.md"
            elif $DB_CHANGED; then
              NEEDS_SYNC="true"
              SYNC_TYPE="database"
              AFFECTED_DOCS=".claude/modules/database/schema.md docs/database-design.md"
            elif $CONTEXT_CHANGED; then
              NEEDS_SYNC="true"
              SYNC_TYPE="context"
              AFFECTED_DOCS=".claude/README.md CLAUDE.md"
            elif $COMMAND_CHANGED; then
              NEEDS_SYNC="true"
              SYNC_TYPE="commands"
              AFFECTED_DOCS=".claude/docs/quick-commands.md README.md"
            fi
          fi
          
          # Remove duplicates from affected docs
          AFFECTED_DOCS=$(echo $AFFECTED_DOCS | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          echo "needs_sync=$NEEDS_SYNC" >> $GITHUB_OUTPUT
          echo "sync_type=$SYNC_TYPE" >> $GITHUB_OUTPUT
          echo "affected_docs=$AFFECTED_DOCS" >> $GITHUB_OUTPUT
          echo "change_summary=$CHANGE_SUMMARY" >> $GITHUB_OUTPUT
          
          echo "## Documentation Impact Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Needs Sync: $NEEDS_SYNC" >> $GITHUB_STEP_SUMMARY
          echo "- Sync Type: $SYNC_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- Affected Docs: $AFFECTED_DOCS" >> $GITHUB_STEP_SUMMARY
          echo "- Change Summary: $CHANGE_SUMMARY" >> $GITHUB_STEP_SUMMARY

  sync-documentation:
    name: Synchronize Documentation
    needs: analyze-changes
    if: needs.analyze-changes.outputs.needs_sync == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install tiktoken pyyaml
      
      - name: Documentation Sync with Claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "15"
          max_turns: "4"
          direct_prompt: |
            You are updating documentation for the Mids Hero Web project.
            
            Sync Type: ${{ needs.analyze-changes.outputs.sync_type }}
            Affected Documentation: ${{ needs.analyze-changes.outputs.affected_docs }}
            Change Summary: ${{ needs.analyze-changes.outputs.change_summary }}
            Recent Commits:
            ${{ steps.context.outputs.commits }}
            
            Based on the sync type, perform ONLY these tasks:
            
            "workflows" sync:
            1. Update github_actions_summary.md with Claude workflow optimizations
            2. Update .github/workflows/README.md if workflow functionality changed
            3. Remove references to deleted workflows
            
            "context" sync:
            1. Update .claude/README.md for context system changes
            2. Verify CLAUDE.md token count (<5K)
            3. Fix broken file references
            
            "api" sync:
            1. Update API endpoint documentation
            2. Add new endpoints, remove deleted ones
            
            "commands" sync:
            1. Update quick commands in .claude/docs/quick-commands.md
            2. Sync README.md command examples
            
            "database" sync:
            1. Update schema documentation
            2. Document new models/migrations
            
            "full" sync:
            1. Validate all documentation consistency
            2. Fix all broken references
            3. Update token counts
            
            Critical Rules:
            - Make minimal necessary changes
            - Use git to check current file state
            - Commit with message: "docs: auto-sync [sync_type] documentation"
            - If no changes needed, state that clearly

  validate-token-limits:
    name: Validate Token Limits
    needs: sync-documentation
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache tiktoken
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-tiktoken-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-tiktoken-
            ${{ runner.os }}-pip-
      
      - name: Install tiktoken
        run: pip install tiktoken
      
      - name: Check token limits
        id: token-check
        run: |
          python << 'EOF'
          import tiktoken
          import json
          
          encoding = tiktoken.get_encoding("cl100k_base")
          
          files_to_check = {
              "CLAUDE.md": 5000,
              ".claude/README.md": 3000,
              ".github/README.md": 3000,
              ".github/workflows/README.md": 5000
          }
          
          results = []
          warnings = []
          
          for file_path, limit in files_to_check.items():
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()
                      tokens = len(encoding.encode(content))
                      status = "✅" if tokens < limit else "⚠️"
                      
                      results.append(f"| {file_path} | {tokens} | {limit} | {status} |")
                      
                      if tokens > limit * 0.9:
                          warnings.append(f"{file_path}: {tokens}/{limit} tokens")
              except FileNotFoundError:
                  results.append(f"| {file_path} | - | {limit} | ❌ Not Found |")
          
          print("## Token Limit Validation")
          print("| File | Tokens | Limit | Status |")
          print("|------|--------|-------|--------|")
          for result in results:
              print(result)
          
          if warnings:
              print("\n### ⚠️ Warnings")
              for warning in warnings:
                  print(f"- {warning}")
              
              with open("token_warnings.json", "w") as f:
                  json.dump({"warnings": warnings}, f)
          EOF
      
      - name: Comment token warnings on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const warnings = JSON.parse(fs.readFileSync('token_warnings.json', 'utf8'));
              
              if (warnings.warnings && warnings.warnings.length > 0) {
                const body = `## ⚠️ Documentation Token Limit Warnings\n\n` +
                  `The following files are approaching or exceeding token limits:\n\n` +
                  warnings.warnings.map(w => `- ${w}`).join('\n') +
                  `\n\n**Action Required**: Consider refactoring these files to stay within limits.`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            } catch (e) {
              console.log('No token warnings to report');
            }

  create-summary:
    name: Create Sync Summary
    needs: [analyze-changes, sync-documentation, validate-token-limits]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create summary report
        run: |
          echo "# 📚 Documentation Auto-Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sync Type**: ${{ needs.analyze-changes.outputs.sync_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.analyze-changes.outputs.sync_type }}" != "none" ]]; then
            echo "## Affected Documentation" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.analyze-changes.outputs.affected_docs }}" | tr ' ' '\n' | while read doc; do
              if [[ -n "$doc" ]]; then
                echo "- $doc" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Automated by Documentation Auto-Sync Workflow*" >> $GITHUB_STEP_SUMMARY