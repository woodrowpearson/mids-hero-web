name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Unified linting and quality checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Run quality checks
        run: |
          just lint
          just typecheck || true  # Allow typecheck to fail for now
      
      - name: Check for security issues
        run: |
          cd backend && uv pip install bandit safety
          bandit -r app/ -ll || true
          safety check || true

  # Backend tests with PostgreSQL
  backend-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: mhw_user
          POSTGRES_PASSWORD: mhw_password
          POSTGRES_DB: mids_hero_web_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Install backend dependencies
        run: |
          cd backend
          uv venv
          uv pip sync requirements.txt
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://mhw_user:mhw_password@localhost:5432/mids_hero_web_test
        run: |
          cd backend
          uv run alembic upgrade head
      
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://mhw_user:mhw_password@localhost:5432/mids_hero_web_test
          TESTING: true
        run: |
          cd backend
          uv run pytest -v --cov=app --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}

  # DataExporter specific tests
  dataexporter-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: dataexporter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install DataExporter dependencies
        run: |
          cd DataExporter
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run DataExporter tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dataexporter_test
        run: |
          cd DataExporter
          pytest -v tests/

  # Docker build validation
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: mids-hero-web-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: mids-hero-web-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker Compose
        run: |
          docker compose build
          docker compose run --rm backend echo "Backend container OK"
          docker compose run --rm frontend echo "Frontend container OK"

  # Just command validation
  just-commands:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install just
        uses: extractions/setup-just@v2
      
      - name: Validate justfile
        run: |
          just --list
          just --evaluate > /dev/null

  # Summary status check
  ci-complete:
    if: always()
    needs: [quality-checks, backend-tests, frontend-tests, dataexporter-tests, docker-build, just-commands]
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "CI failed!"
            exit 1
          else
            echo "CI passed!"
          fi