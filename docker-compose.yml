# Docker Compose file for Mids Hero Web local development

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mids_web
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    working_dir: /app/backend
    command: uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mids_web
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - DEBUG=true
      - I12_MEMORY_LIMIT_GB=1.0
      - I12_BATCH_SIZE=1000
      - I12_CHUNK_SIZE=5000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - backend_venv:/app/backend/.venv
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Redis for I12 power data caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Adminer for database management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=dracula

volumes:
  postgres_data:
  redis_data:
  backend_venv:

networks:
  default:
    name: mids-web-network
