name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  ai-review:
    if: |
      github.event_name == 'pull_request' || 
      (github.event.issue.pull_request && contains(github.event.comment.body, '/ai-review'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml tiktoken
          
      - name: Get PR diff
        id: diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
          else
            PR_NUMBER=${{ github.event.issue.number }}
          fi
          
          # Get the diff
          gh pr diff $PR_NUMBER > pr_diff.txt
          
          # Get changed files list
          gh pr view $PR_NUMBER --json files --jq '.files[].path' > changed_files.txt
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Analyze PR
        id: analyze
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -c "
          import os
          import anthropic
          import json
          
          client = anthropic.Anthropic()
          
          # Read diff
          with open('pr_diff.txt', 'r') as f:
              diff = f.read()[:50000]  # Limit diff size
              
          # Read changed files
          with open('changed_files.txt', 'r') as f:
              files = f.read().strip().split('\n')
          
          # Create review prompt
          prompt = f'''Review this PR and provide feedback:
          
          Changed files: {', '.join(files)}
          
          Diff:
          {diff}
          
          Provide:
          1. Summary of changes
          2. Potential issues or bugs
          3. Suggestions for improvement
          4. Check for:
             - Use of fd instead of find
             - Use of trash instead of rm -rf
             - Following project conventions
          '''
          
          # Get review
          response = client.messages.create(
              model='claude-3-5-sonnet-20241022',
              max_tokens=2000,
              messages=[{'role': 'user', 'content': prompt}]
          )
          
          review = response.content[0].text
          
          # Save review
          with open('review.md', 'w') as f:
              f.write(review)
          "
          
      - name: Post review comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = ${{ steps.diff.outputs.pr_number }};
            
            // Post review comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## 🤖 AI Review\n\n${review}\n\n---\n*Generated by Claude AI*`
            });
            
      - name: Run automated checks
        id: checks
        run: |
          echo "## Automated Checks" > checks_report.md
          echo "" >> checks_report.md
          
          # Check for forbidden commands
          if grep -r "find " --include="*.sh" --include="*.yml" . 2>/dev/null | grep -v "fd"; then
            echo "❌ Found usage of 'find' command (use 'fd' instead)" >> checks_report.md
          else
            echo "✅ No forbidden 'find' commands" >> checks_report.md
          fi
          
          if grep -r "rm -rf" --include="*.sh" --include="*.yml" . 2>/dev/null; then
            echo "❌ Found usage of 'rm -rf' (use 'trash' instead)" >> checks_report.md
          else
            echo "✅ No forbidden 'rm -rf' commands" >> checks_report.md
          fi
          
          # Check CLAUDE.md size
          if [ -f "CLAUDE.md" ]; then
            TOKENS=$(($(wc -c < CLAUDE.md) / 4))
            if [ "$TOKENS" -gt 5000 ]; then
              echo "⚠️ CLAUDE.md has ~$TOKENS tokens (recommended: <5000)" >> checks_report.md
            else
              echo "✅ CLAUDE.md size is optimal (~$TOKENS tokens)" >> checks_report.md
            fi
          fi
          
          cat checks_report.md >> $GITHUB_STEP_SUMMARY