name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  ai-review:
    if: |
      github.event_name == 'pull_request' || 
      (github.event.issue.pull_request && contains(github.event.comment.body, '/ai-review'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install anthropic pyyaml tiktoken
          
      - name: Get PR diff
        id: diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
          else
            PR_NUMBER=${{ github.event.issue.number }}
          fi
          
          # Get the diff
          gh pr diff $PR_NUMBER > pr_diff.txt
          
          # Get changed files list
          gh pr view $PR_NUMBER --json files --jq '.files[].path' > changed_files.txt
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Analyze PR with City of Heroes context
        id: analyze
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -c "
          import os
          import anthropic
          import json
          
          client = anthropic.Anthropic()
          
          # Read diff
          with open('pr_diff.txt', 'r') as f:
              diff = f.read()[:50000]  # Limit diff size
              
          # Read changed files
          with open('changed_files.txt', 'r') as f:
              files = f.read().strip().split('\n')
          
          # Read project context
          project_context = ''
          try:
              with open('CLAUDE.md', 'r') as f:
                  project_context = f.read()[:3000]  # First 3k chars
          except:
              project_context = 'Mids Hero Web - City of Heroes character build planner'
          
          # Create review prompt specific to Mids Hero Web
          prompt = f'''Review this PR for the Mids Hero Web project - a City of Heroes character build planner.

          Project Context:
          {project_context}

          Changed files: {', '.join(files)}
          
          Diff:
          {diff}
          
          Please provide:
          1. **Summary of changes** - What was modified and why
          2. **Epic alignment** - How this relates to the 6-epic roadmap (especially Epic 2 data import blocker)
          3. **Code quality issues** - Bugs, performance, maintainability concerns
          4. **Architecture compliance** - Does this follow FastAPI/React/uv patterns?
          5. **Command compliance** - Check for:
             - Use of uv instead of pip
             - Use of fd instead of find  
             - Use of trash instead of rm -rf
             - Use of just commands instead of direct execution
          6. **City of Heroes domain** - Are game mechanics (archetypes, powers, enhancements) handled correctly?
          7. **Context management** - Does this keep documentation under token limits?
          8. **Suggestions** - Specific improvements for this codebase
          
          Focus on:
          - Database models accuracy for CoH data
          - API endpoint consistency
          - React component patterns
          - Build calculation correctness
          - Docker/deployment considerations
          '''
          
          # Get review
          response = client.messages.create(
              model='claude-3-5-sonnet-20241022',
              max_tokens=3000,
              messages=[{'role': 'user', 'content': prompt}]
          )
          
          review = response.content[0].text
          
          # Save review
          with open('review.md', 'w') as f:
              f.write(review)
          "
          
      - name: Post review comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = ${{ steps.diff.outputs.pr_number }};
            
            // Post review comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## 🤖 AI Review - Mids Hero Web

${review}

---
*Generated by Claude AI with Mids Hero Web context*`
            });
            
      - name: Run Mids-specific checks
        id: checks
        run: |
          echo "## Mids Hero Web Automated Checks" > checks_report.md
          echo "" >> checks_report.md
          
          # Check for forbidden commands
          if grep -r "pip install" --include="*.md" --include="*.sh" --include="*.py" . 2>/dev/null | grep -v "requirements-context"; then
            echo "❌ Found 'pip install' usage (use 'uv' instead)" >> checks_report.md
          else
            echo "✅ No forbidden 'pip install' commands" >> checks_report.md
          fi
          
          if grep -r "find " --include="*.sh" --include="*.md" . 2>/dev/null | grep -v "fd\|/usr/bin/find"; then
            echo "❌ Found usage of 'find' command (use 'fd' instead)" >> checks_report.md
          else
            echo "✅ No forbidden 'find' commands" >> checks_report.md
          fi
          
          if grep -r "rm -rf" --include="*.sh" --include="*.md" . 2>/dev/null; then
            echo "❌ Found usage of 'rm -rf' (use 'trash' instead)" >> checks_report.md
          else
            echo "✅ No forbidden 'rm -rf' commands" >> checks_report.md
          fi
          
          # Check CLAUDE.md size
          if [ -f "CLAUDE.md" ]; then
            TOKENS=$(($(wc -c < CLAUDE.md) / 4))
            if [ "$TOKENS" -gt 5000 ]; then
              echo "⚠️ CLAUDE.md has ~$TOKENS tokens (recommended: <5000)" >> checks_report.md
            else
              echo "✅ CLAUDE.md size is optimal (~$TOKENS tokens)" >> checks_report.md
            fi
          fi
          
          # Check for Epic 2 blocker status
          if [ -f ".claude/epics/epic-2-data-import.md" ]; then
            if grep -q "BLOCKED" .claude/epics/epic-2-data-import.md; then
              echo "⚠️ Epic 2 is still blocked - need City of Heroes data files" >> checks_report.md
            fi
          fi
          
          # Check justfile usage
          if grep -r "python scripts/" --include="*.md" . 2>/dev/null | grep -v "just"; then
            echo "⚠️ Found direct script execution (consider using 'just' commands)" >> checks_report.md
          else
            echo "✅ Proper use of just commands" >> checks_report.md
          fi
          
          # Check for backend/frontend separation
          changed_files=$(cat changed_files.txt)
          backend_changes=$(echo "$changed_files" | grep "^backend/" || true)
          frontend_changes=$(echo "$changed_files" | grep "^frontend/" || true)
          
          if [ -n "$backend_changes" ] && [ -n "$frontend_changes" ]; then
            echo "📝 Changes span both backend and frontend - ensure API contract consistency" >> checks_report.md
          fi
          
          cat checks_report.md >> $GITHUB_STEP_SUMMARY