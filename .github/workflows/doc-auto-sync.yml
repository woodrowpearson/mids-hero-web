name: Documentation Auto-Sync

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.md'
      - '.github/workflows/*.yml'
      - 'justfile'
      - 'backend/pyproject.toml'
      - 'frontend/package.json'
      - 'docker-compose.yml'
      - 'Dockerfile'
  pull_request:
    types: [opened, synchronize, ready_for_review]
  schedule:
    # Weekly full sync on Sunday at 2 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_full_sync:
        description: 'Force full documentation synchronization'
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  analyze-changes:
    name: Analyze Documentation Impact
    runs-on: ubuntu-latest
    outputs:
      needs_sync: ${{ steps.analysis.outputs.needs_sync }}
      sync_type: ${{ steps.analysis.outputs.sync_type }}
      affected_docs: ${{ steps.analysis.outputs.affected_docs }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze changed files
        id: analysis
        run: |
          NEEDS_SYNC="false"
          SYNC_TYPE="none"
          AFFECTED_DOCS=""
          
          # Force full sync if requested or scheduled
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ inputs.force_full_sync }}" == "true" ]]; then
            NEEDS_SYNC="true"
            SYNC_TYPE="full"
            AFFECTED_DOCS="all"
          else
            # Get changed files
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
            else
              CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
            fi
            
            # Analyze impact
            for file in $CHANGED_FILES; do
              case "$file" in
                .github/workflows/*.yml)
                  NEEDS_SYNC="true"
                  SYNC_TYPE="workflows"
                  AFFECTED_DOCS="$AFFECTED_DOCS .github/README.md .github/workflows/README.md"
                  ;;
                .claude/*)
                  NEEDS_SYNC="true"
                  SYNC_TYPE="context"
                  AFFECTED_DOCS="$AFFECTED_DOCS .claude/README.md CLAUDE.md"
                  ;;
                backend/app/api/*.py)
                  NEEDS_SYNC="true"
                  SYNC_TYPE="api"
                  AFFECTED_DOCS="$AFFECTED_DOCS docs/api-reference.md .claude/modules/api/specification.md"
                  ;;
                justfile)
                  NEEDS_SYNC="true"
                  SYNC_TYPE="commands"
                  AFFECTED_DOCS="$AFFECTED_DOCS .claude/docs/quick-commands.md README.md"
                  ;;
                backend/app/models/*.py)
                  NEEDS_SYNC="true"
                  SYNC_TYPE="database"
                  AFFECTED_DOCS="$AFFECTED_DOCS .claude/modules/database/schema.md docs/database-design.md"
                  ;;
                *.md)
                  # Check if this is a major documentation file
                  if [[ "$file" == "README.md" ]] || [[ "$file" == "CLAUDE.md" ]]; then
                    NEEDS_SYNC="true"
                    SYNC_TYPE="docs"
                  fi
                  ;;
              esac
            done
          fi
          
          # Remove duplicates from affected docs
          AFFECTED_DOCS=$(echo $AFFECTED_DOCS | tr ' ' '\n' | sort -u | tr '\n' ' ')
          
          echo "needs_sync=$NEEDS_SYNC" >> $GITHUB_OUTPUT
          echo "sync_type=$SYNC_TYPE" >> $GITHUB_OUTPUT
          echo "affected_docs=$AFFECTED_DOCS" >> $GITHUB_OUTPUT
          
          echo "## Documentation Impact Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Needs Sync: $NEEDS_SYNC" >> $GITHUB_STEP_SUMMARY
          echo "- Sync Type: $SYNC_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- Affected Docs: $AFFECTED_DOCS" >> $GITHUB_STEP_SUMMARY

  sync-documentation:
    name: Synchronize Documentation
    needs: analyze-changes
    if: needs.analyze-changes.outputs.needs_sync == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install tiktoken pyyaml
      
      - name: Documentation Sync with Claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a script to handle documentation updates
          cat > update_docs.py << 'EOF'
import os
import sys
import subprocess

# Get sync type and affected docs
sync_type = "${{ needs.analyze-changes.outputs.sync_type }}"
affected_docs = "${{ needs.analyze-changes.outputs.affected_docs }}"
event_type = "${{ github.event_name }}"

print(f"Sync Type: {sync_type}")
print(f"Affected Docs: {affected_docs}")
print(f"Event Type: {event_type}")

# For now, create a simple summary of what would be updated
summary = []

if sync_type == "workflows":
    summary.append("Would update .github/README.md and .github/workflows/README.md")
elif sync_type == "context":
    summary.append("Would update .claude/README.md and check CLAUDE.md tokens")
elif sync_type == "api":
    summary.append("Would update API documentation")
elif sync_type == "commands":
    summary.append("Would update quick commands documentation")
elif sync_type == "database":
    summary.append("Would update database schema documentation")
elif sync_type == "full":
    summary.append("Would perform full documentation consistency check")

# Save summary
with open("doc_sync_summary.txt", "w") as f:
    f.write("\n".join(summary))

print("Documentation sync analysis complete")
EOF
          
          python update_docs.py
          
          # If this is a PR and we have a summary, post it
          if [ -f "doc_sync_summary.txt" ] && [ "${{ github.event_name }}" == "pull_request" ]; then
            SUMMARY=$(cat doc_sync_summary.txt)
            
            # Use Claude to generate documentation update suggestions
            bash .github/scripts/claude_wrapper.sh \
              --prompt "Based on the following sync analysis for the Mids Hero Web project:
              
              Sync Type: ${{ needs.analyze-changes.outputs.sync_type }}
              Affected Files: ${{ needs.analyze-changes.outputs.affected_docs }}
              
              Summary: $SUMMARY
              
              Please provide specific documentation update suggestions that should be made.
              Focus on maintaining consistency and ensuring all documentation stays current.
              Keep suggestions actionable and specific." \
              --timeout 20 \
              --pr ${{ github.event.pull_request.number || '' }} \
              --post-comment
          fi

  validate-token-limits:
    name: Validate Token Limits
    needs: sync-documentation
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install tiktoken
        run: pip install tiktoken
      
      - name: Check token limits
        id: token-check
        run: |
          python << 'EOF'
          import tiktoken
          import json
          
          encoding = tiktoken.get_encoding("cl100k_base")
          
          files_to_check = {
              "CLAUDE.md": 5000,
              ".claude/README.md": 3000,
              ".github/README.md": 3000,
              ".github/workflows/README.md": 5000
          }
          
          results = []
          warnings = []
          
          for file_path, limit in files_to_check.items():
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()
                      tokens = len(encoding.encode(content))
                      status = "✅" if tokens < limit else "⚠️"
                      
                      results.append(f"| {file_path} | {tokens} | {limit} | {status} |")
                      
                      if tokens > limit * 0.9:
                          warnings.append(f"{file_path}: {tokens}/{limit} tokens")
              except FileNotFoundError:
                  results.append(f"| {file_path} | - | {limit} | ❌ Not Found |")
          
          print("## Token Limit Validation")
          print("| File | Tokens | Limit | Status |")
          print("|------|--------|-------|--------|")
          for result in results:
              print(result)
          
          if warnings:
              print("\n### ⚠️ Warnings")
              for warning in warnings:
                  print(f"- {warning}")
              
              with open("token_warnings.json", "w") as f:
                  json.dump({"warnings": warnings}, f)
          EOF
      
      - name: Comment token warnings on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const warnings = JSON.parse(fs.readFileSync('token_warnings.json', 'utf8'));
              
              if (warnings.warnings && warnings.warnings.length > 0) {
                const body = `## ⚠️ Documentation Token Limit Warnings\n\n` +
                  `The following files are approaching or exceeding token limits:\n\n` +
                  warnings.warnings.map(w => `- ${w}`).join('\n') +
                  `\n\n**Action Required**: Consider refactoring these files to stay within limits.`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            } catch (e) {
              console.log('No token warnings to report');
            }

  create-summary:
    name: Create Sync Summary
    needs: [analyze-changes, sync-documentation, validate-token-limits]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create summary report
        run: |
          echo "# 📚 Documentation Auto-Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sync Type**: ${{ needs.analyze-changes.outputs.sync_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.analyze-changes.outputs.sync_type }}" != "none" ]]; then
            echo "## Affected Documentation" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.analyze-changes.outputs.affected_docs }}" | tr ' ' '\n' | while read doc; do
              if [[ -n "$doc" ]]; then
                echo "- $doc" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Automated by Documentation Auto-Sync Workflow*" >> $GITHUB_STEP_SUMMARY