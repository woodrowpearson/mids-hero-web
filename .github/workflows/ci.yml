name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./legacy-backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
        
      - name: Install dependencies
        run: uv sync --group dev
        
      - name: Run ruff
        run: uv run ruff check .
        
      - name: Check formatting
        run: |
          uv run black --check .
          uv run isort --check-only .
          
      - name: Type check
        run: uv run mypy . --ignore-missing-imports --no-strict-optional || true

  frontend-lint:
    name: Frontend Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Type check
        run: npm run type-check

  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./legacy-backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: midsdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
        
      - name: Install dependencies
        run: uv sync --group dev --group test
        
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/midsdb_test
        run: uv run pytest --cov=app --cov-report=xml --cov-report=term
        
      - name: Upload coverage
        # Temporarily disabled - requires CODECOV_TOKEN secret configuration
        if: false
        uses: codecov/codecov-action@v4
        with:
          file: ./legacy-backend/coverage.xml
          fail_ci_if_error: false

  frontend-test:
    name: Frontend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  just-commands:
    name: Test Just Commands
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install just
        uses: extractions/setup-just@v2
        
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Test health check
        run: just health
        
      - name: Test quality checks
        run: just quality || true  # Allow failure for now

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-lint, backend-test, frontend-test]
    if: false  # Disabled temporarily to focus on AI workflow testing
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: mids-hero-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max